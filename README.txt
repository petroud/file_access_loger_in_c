---------- Assign 3 ----------
--------- W2022-2023 ---------

Petrou Dimitrios

------------------------------

------- Important Note ---------------------------------------------------
I didnt implement the RSA encryption and decryption of the log file.
--------------------------------------------------------------------------


------- HOW TO RUN -------------------------------------------------------
a) compile: make
b) run the test file: LD_PRELOAD=./logger.so ./test_aclog
c) run the acmonitor based on the argument standards given
d) clean: make clean
--------------------------------------------------------------------------

------- General Notice ---------------------------------------------------
The tool will only print malicious users with more than 7 malicious 
actions. Be sure that the file you give as argument to the monitor 
exists otherwise the tool will exit with SIGSEGV (Segmentation Fault).
--------------------------------------------------------------------------

------- logger.c ---------------------------------------------------------
The tool implements the functions fwrite() and fopen() in such a way
that a log file is being generated and updated during every use of them
by a user. A new library is generated by the gcc compiler and using the
LD_PRELOAD trick it is loaded to the executable in order to override
the normal fopen & fwrite. The logging is being implemented inside 
the fopen/fwrite bodies by using helper functions. Functions included:

    a) logAction(...): This function actually appends a new record 
       in the log file. It loads the original fopen and fwrite in order
       to edit the log file. Using the hasher(...) the function hashes 
       by using MD5 method the contents of the file under action. The whole
       result alognside timestamp, path, acccess denied flag and access type
       conventional flag is appended to the logFile. The pointer for the 
       file in case of fopen() is being returned by the caller of logAction().
    b) hasher(...): It hashes the contents of the file using the MD5 method
       contained in the OpenSSL libarry and returns the hashed string.
    c) recoverPath(...): It recovers the path of a file given a pointer to it.
   
    The log flags for the access type are being assigned based on the following
    policy:
    --------------------------------------------------------------------------------------
    |                                 fopen() with non existent file                     |
    |-------------|----------------------------------------------------------------------|
    |             |  r      r+     rb     rb+     w     wb     w+     wb+    a     a+    |
    |             |----------------------------------------------------------------------|
    |accessType   |  0      0      0      0       0      0     0      0      0     0     |
    |actionDenied |  1      1      1      1       0      0     0      0      0     0     |
    --------------------------------------------------------------------------------------

    --------------------------------------------------------------------------------------
    |                                     fopen() with existent file                     |
    |-------------|----------------------------------------------------------------------|
    |             |  r      r+     rb     rb+     w     wb     w+     wb+    a     a+    |
    |             |----------------------------------------------------------------------|
    |accessType   |  1      1      1      1       3      3     3      3      1     1     |
    |actionDenied |  X      X      X      X       X      X     X      X      X     X     |
    --------------------------------------------------------------------------------------

    X is dependent in user rights on the file (eg READ-ONLY/WRITE-ONLY/NO-RIGHTS)

    -------------------------------------------------------------------------
    |                                    fwrite()                           |
    |-------------|---------------------------------------------------------|
    |             |           WRITABLE              NON-WRITABLE            |
    |             |---------------------------------------------------------|
    |accessType   |               2                       2                 |
    |actionDenied |               0                       1                 |
    -------------------------------------------------------------------------

    As mentioned in logAction the fopen() preloads the original fopen() of 
    stdio.h in order to return a pointer to the file when the action is not
    malicious.

--------------------------------------------------------------------------






------- acmonitor.c ------------------------------------------------------
This tool parses the  log file and exports statistics in the terminal.
There are two available features of parsing and data analysis which 
are implemented from two methods:
    a)list_unauthorized_accesses(...): this function parses the file
      and loads the data in a list of "entry" type structs that hold 
      information about a log file entry each. The list of entries is then 
      iterated for each maliciou access. The user id of the malicious
      user and the fact of the act are being stores in array of 'record'. 
      structs. Lastly the array of records is being iterated for each 
      user id and for each record in order to print out the count of 
      malicious acccesses grouped by user id.  

    b)list_file_modifications(...): this function parses the file and 
      and loads the data in a list of 'entry' type structs that hold 
      information about a log file entry each. The list of entries is then
      iterated based on the filename. The tool only scans for entries 
      of the given filename. The current and previous MD5 fingerprints
      of the file are being tracked in order to recognize modifications 
      between different log entries. For each user id that modified the 
      file a record is being appended in an array of 'record' type 
      structs. At last the array of records is being iterated so the
      results are grouped by the user id for a total of modifications 
      made by each one.
--------------------------------------------------------------------------
